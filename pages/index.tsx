import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import TextField from "../components/atom/TextField";
import { SearchIcon } from "../components/icons";
import ActiveVoteBanner from "../components/organisms/ActiveVoteBanner";
import Section from "../components/molecules/Section";
import Box from "../components/atom/Box";
import { useRouter } from "next/router";
import VoteCard from "../components/organisms/VoteCard";
import Layout from "../components/Layout";
import { motion } from "framer-motion";
import { getVotes } from "../apis/votes/getAll/api";
import { getActiveCounts } from "../apis/votes/getActiveCounts/api";

interface Props {
  votes: [];
  activeCounts: number;
}

const Home: NextPage<Props> = ({ votes, activeCounts }) => {
  const router = useRouter();
  console.log(votes);
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="space-y-5 pb-32">
        <TextField placeholder="Search polls ..." beforElement={<SearchIcon color="#283138" />} />
        <ActiveVoteBanner count={activeCounts} />
        <Section title="Top Categories" showAllAction={() => router.push("/tags")}>
          <motion.div
            drag="x"
            dragDirectionLock
            dragConstraints={{ right: 0, left: 0 }}
            dragTransition={{ bounceStiffness: 600, bounceDamping: 20 }}
            dragElastic={0.5}
            whileTap={{ cursor: "grabbing" }}
            className="flex items-center space-x-5"
          >
            <Box className="w-20 h-20 bg-gray-100 rounded-lg" />
            <Box className="w-20 h-20 bg-gray-100 rounded-lg" />
            <Box className="w-20 h-20 bg-gray-100 rounded-lg" />
          </motion.div>
        </Section>
        <Section title="Recent Polls">
          <Box className="flex flex-col space-y-5 ">
            {votes.map((vote) => (
              <VoteCard
                key={vote.id}
                title={vote.title}
                votesCount={vote.votes_count}
                optionsCount={vote.options.length}
                identifier={vote.id}
              />
            ))}
          </Box>
        </Section>
      </main>
    </Layout>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  try {
    const { data: votes } = await getVotes({ page: 1 });
    const { data: activeCounts } = await await getActiveCounts(context.req.cookies["votely.token"]);
    return {
      props: {
        votes,
        activeCounts: activeCounts.count,
      },
    };
  } catch (e) {
    console.log(e);
  }
  return {
    props: {
      vote: null,
    },
  };
};

export default Home;
