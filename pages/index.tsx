import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { useRouter } from 'next/router';
import debounce from 'lodash/debounce';

import TextField from '@/components/atom/TextField';
import { SearchIcon } from '@/components/icons';
import ActiveVoteBanner from '@/components/organisms/ActiveVoteBanner';
import Section from '@/components/molecules/Section';
import Layout from '@/components/Layout';
import TagCardCompact from '@/components/organisms/TagCardCompact';
import Polls from '@/components/organisms/Polls';
import { DragSlider } from '@/components/atom/Slider/Slider';

import { getActiveCounts } from '@/apis/votes/getAllActiveCounts';
import { getBestTags } from '@/apis/tags/best';
import { useUser } from '../contexts/user';
import { getTags } from '@/apis/tags/getAll';

interface Props {
  tags: Tag[];
  activeCounts: number;
}

const Home: NextPage<Props> = ({ activeCounts, tags }) => {
  const router = useRouter();
  const [user] = useUser();
  const [search, setSearch] = useState('');
  const onChangeSearchPolls = debounce(e => {
    setSearch(e.target.value);
  }, 1000);

  return (
    <Layout>
      <Head>
        <title>Votely</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="space-y-5 pb-32">
        <TextField
          placeholder="Search polls ..."
          beforElement={<SearchIcon color="#283138" />}
          onChange={onChangeSearchPolls}
        />
        {user && (
          <ActiveVoteBanner
            count={activeCounts ?? 0}
            onClick={() => router.push(`/user/${user.username}`)}
          />
        )}
        <Section title="Top Categories" showAllAction={() => router.push('/tags')}>
          <DragSlider>
            {tags
              .filter(tag => tag.count_of_polls > 0)
              .map(tag => (
                <TagCardCompact
                  key={tag.id}
                  title={tag.title}
                  pollsCount={tag.count_of_polls}
                  identifier={tag.id}
                />
              ))}
          </DragSlider>
        </Section>
        <Section title="Recent Polls">
          <Polls search={search} />
        </Section>
      </main>
    </Layout>
  );
};

export const getServerSideProps: GetServerSideProps = async context => {
  try {
    const bestTags = await getTags({ page: 1 });
    const activeCounts =
      context.req.cookies?.['votely.token'] &&
      (await (
        await getActiveCounts(context.req.cookies['votely.token'])
      ).data.count);

    return {
      props: {
        tags: bestTags,
        activeCounts: activeCounts ?? 0
      }
    };
  } catch (e) {
    console.log(e);
  }
  return {
    props: {
      tags: []
    }
  };
};

export default Home;
