import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import TextField from "../../components/atom/TextField";
import { SearchIcon } from "../../components/icons";
import ActiveVoteBanner from "../../components/organisms/ActiveVoteBanner";
import Section from "../../components/molecules/Section";
import Box from "../../components/atom/Box";
import { useRouter } from "next/router";
import Layout from "../../components/Layout";
import { getVotes } from "../../apis/votes/getAll/api";
import VoteCard from "../../components/organisms/VoteCard";

interface Props {
  votes: [];
}

const Tags: NextPage = ({ votes }) => {
  const router = useRouter();
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="space-y-5 pb-32">
        <TextField placeholder="Search Polls ..." beforElement={<SearchIcon color="#283138" />} />
        <Box className="flex flex-col space-y-5 ">
          {votes.map((vote) => (
            <VoteCard
              key={vote.id}
              title={vote.title}
              votesCount={vote.votes_count}
              optionsCount={vote.options.length}
              identifier={vote.id}
            />
          ))}
        </Box>
      </main>
    </Layout>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const tagId = context.params?.id;
  try {
    if (tagId) {
      const { data: votes } = await getVotes({ page: 1, tag_id: +tagId });
      return {
        props: {
          votes,
        },
      };
    }
  } catch (e) {
    // console.log(e);
  }
  return {
    props: {
      vote: null,
    },
  };
};

export default Tags;
